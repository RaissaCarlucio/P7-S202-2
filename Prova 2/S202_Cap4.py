from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-dbiot.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("rabe.brasil@gmail.com-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["sLxEpBmAHXtTgyCBkTohZyCd"]
CLIENT_SECRET = secrets["u1XO.uGfC+M85GT55s_9nP-CUWh8_WQXDZD+XaMjLgze93ERGjgaxtgvlHERSpq9Be.5_UF6,umU23zimmuwvoBWdukam+46Q7Yb9maHcNtrNqHpSmt,eC,S+NpcJN0v"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
cassandra_session = cluster.connect()

row = cassandra_session.execute("select release_version from system.local").one()
if row:
  print(row[0])
else:
  print("An error occurred.")
  
cassandra_session.set_keyspace('ksiot')

cassandra_session.execute("DROP TABLE IF EXISTS estoque;")
query = '''
        CREATE TABLE estoque(
            id int,
            nome text,
            carro text,
            estante int,
            nivel int,
            quantidade int,
            primary key((carro), estante, nivel, id)
        );
'''

cassandra_session.execute(query)
cassandra_session.execute("TRUNCATE estoque;")

query = """ INSERT INTO estoque(id, nome, carro, estante, nivel, quantidade) (%s, %s, %s, %s, %s, %s) """
cassandra_session.execute(query, (5, "Pistao", "Mustang", 4, 1, 167))

query = """ INSERT INTO estoque(id, nome, carro, estante, nivel, quantidade) (%s, %s, %s, %s, %s, %s) """
cassandra_session.execute(query, (4, "Suspensao", "Argo", 1, 1, 3500))


# Questao 2
query = """ SELECT *
FROM estoque
WHERE nome = 'Pistao' ALLOW FILTERING;"""
result = cassandra_session.execute(query).all()

print("Dados das pecas com nome de Pistao: ")
if result is not None:
    for r in result:
        print(r)



#b)
query = """
SELECT AVG(quantidade)
FROM estoque;
"""
result = cassandra_session.execute(query).one()
print("Media: ", result)

#c)
query = """
SELECT COUNT(*)
FROM estoque;
"""
result = cassandra_session.execute(query).one()
print("Colunas: ", result)

#d)
query = """
SELECT MAX(quantidade) AS maior_quantidade, MIN(quantidade) AS menor_quantidade 
FROM estoque;
"""
result = cassandra_session.execute(query).one()

print("Maior e menor quantidade de peças no estoque: ")
print(result)


#e)
query = """
SELECT nome, carro, quantidade
FROM estoque
WHERE estante = 3;
"""
result = cassandra_session.execute(query).all()

print("Informações sobre as peças na estante 3: ")
if result is not None:
  for r in result:
    print(r)


#f)
query = """
SELECT AVG(quantidade)
FROM estoque
WHERE nivel = 1 ALLOW FILTERING;
"""
print("Média da quantidade de peças no nível 1: ")
print(result)

#g)
query = """
SELECT *
FROM estoque
WHERE estante < 3 AND nivel > 4 ALLOW FILTERING;
"""
result = cassandra_session.execute(query).all()

print("Peças nas estahntes com núemro menor que 3 e nível maior que 4: ")
if result is not None:
  for r in result:
    print(r)













